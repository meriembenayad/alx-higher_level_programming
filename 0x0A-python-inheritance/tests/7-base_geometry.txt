>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> string = "property"
>>> bg = BaseGeometry()
>>> bg.integer_validator(string,12)
>>> bg.integer_validator(string,89)
>>> bg.integer_validator(string, -2)
Traceback (most recent call last):
    ...
ValueError: property must be greater than 0

>>> bg.integer_validator(string, "string")
Traceback (most recent call last):
    ....
TypeError: property must be an integer

>>> bg.integer_validator(string, [])
Traceback (most recent call last):
    ...
TypeError: property must be an integer

>>> bg.integer_validator(string, [1])
Traceback (most recent call last):
    ...
TypeError: property must be an integer

>>> bg.integer_validator(string, (1))
>>> bg.integer_validator(string, (1,2))
Traceback (most recent call last):
    ...
TypeError: property must be an integer

>>> bg.integer_validator(string, {})
Traceback (most recent call last):
    ...
TypeError: property must be an integer

>>> bg.integer_validator(string, {1:2})
Traceback (most recent call last):
    ...
TypeError: property must be an integer

>>> bg.integer_validator(string,)
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator()
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator(string, 1.0)
Traceback (most recent call last):
    ...
TypeError: property must be an integer

>>> bg.integer_validator("dict", {"key": "value"})
Traceback (most recent call last):
    ...
TypeError: dict must be an integer

>>> bg.integer_validator("set", {"hello", "world"})
Traceback (most recent call last):
    ...
TypeError: set must be an integer

>>> bg.integer_validator("frozenset", frozenset(["hello", "world"]))
Traceback (most recent call last):
    ...
TypeError: frozenset must be an integer

>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[TypeError] name must be an integer

>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[ValueError] age must be greater than 0

>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[ValueError] distance must be greater than 0
